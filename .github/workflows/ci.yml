name: C++ CI Workflow

on:
  push:
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'


jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}]'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]
        os: [ubuntu-latest, macos-latest, windows-latest]
        exclude:
        # excludes windows-latest Debug build
        # workaround for https://github.com/traversaro/drake-lite-cmake/issues/7
        - os: windows-latest
          build_type: Debug

    steps:
    - uses: actions/checkout@master

    # Print environment variables to simplify development and debugging
    - name: Environment Variables
      shell: bash
      run: env

    # Remove apt repos that are known to break from time to time
    # See https://github.com/actions/virtual-environments/issues/323
    - name: Remove broken apt repos [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done

    # symlinks disabled are the default setting on Windows, but unfortunatly GitHub Actions enabled them 
    # See: 
    # * https://github.com/robotology/robotology-superbuild/issues/429
    # * https://github.com/actions/virtual-environments/pull/1186  
    - name: Disable Git symlinks on Windows 
      if: contains(matrix.os, 'windows')
      run: git config --global core.symlinks false

    # ============
    # DEPENDENCIES
    # ============

    - name: Dependencies [Windows]
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg.exe --triplet x64-windows install fmt eigen3 tinyxml2
        # Dependencies to compile fcl from sources
        vcpkg.exe --triplet x64-windows install ccd octomap
        # Dependencies to compile sdformat9 from sources
        vcpkg.exe --triplet x64-windows install tinyxml urdfdom

    - name: Dependencies [macOS]
      if: matrix.os == 'macOS-latest'
      run: |
        brew install fmt spdlog eigen tinyxml2 osrf/simulation/sdformat9
        # Dependencies to compile fcl from sources
        brew install libccd octomap

    - name: Dependencies [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install git build-essential cmake libeigen3-dev libtinyxml2-dev
        # Dependencies to compile fcl from sources
        sudo apt-get install libccd-dev liboctomap-dev
        # sdformat
        sudo sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu `lsb_release -cs` main" > /etc/apt/sources.list.d/gazebo-latest.list'
        wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -
        sudo apt-get update
        sudo apt-get install libsdformat9-dev


    - name: Source-based Dependencies [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # fcl
        git clone https://github.com/flexible-collision-library/fcl
        cd fcl
        mkdir -p build
        cd build
        cmake -A x64  -DBUILD_TESTING:BOOL=OFF -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL
        cd ../..
        # ignition-cmake2
        git clone https://github.com/ignitionrobotics/ign-cmake
        cd ign-cmake
        git checkout ign-cmake2
        mkdir -p build
        cd build
        cmake -A x64  -DBUILD_TESTING:BOOL=OFF -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL
        cd ../..
        # ignition-math6
        git clone https://github.com/ignitionrobotics/ign-math
        cd ign-math
        git checkout ign-math6
        mkdir -p build
        cd build
        cmake -A x64  -DBUILD_TESTING:BOOL=OFF -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL
        cd ../..
        # sdformat9
        git clone https://github.com/osrf/sdformat
        cd sdformat
        git checkout sdf9
        mkdir -p build
        cd build
        cmake -A x64  -DBUILD_TESTING:BOOL=OFF -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL
        cd ../..
        # spdlog
        git clone https://github.com/gabime/spdlog
        cd spdlog
        git checkout v1.6.0
        mkdir -p build
        cd build
        cmake -A x64 -DSPDLOG_BUILD_SHARED:BOOL=ON -DSPDLOG_BUILD_EXAMPLE:BOOL=OFF -DSPDLOG_FMT_EXTERNAL:BOOL=ON -DBUILD_TESTING:BOOL=OFF -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL
        cd ../..

    - name: Source-based Dependencies [Ubuntu/macOS]
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      shell: bash
      run: |
        # fmt
        git clone https://github.com/fmtlib/fmt
        cd fmt
        git checkout 6.1.2
        mkdir -p build
        cd build
        cmake -DBUILD_SHARED_LIBS:BOOL=ON -DFMT_TEST:BOOL=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        cmake --build . --config ${{ matrix.build_type }} --target install
        cd ../..
        # spdlog
        git clone https://github.com/gabime/spdlog
        cd spdlog
        git checkout v1.6.0
        mkdir -p build
        cd build
        cmake -DSPDLOG_BUILD_SHARED:BOOL=ON -DSPDLOG_BUILD_EXAMPLE:BOOL=OFF -DSPDLOG_FMT_EXTERNAL:BOOL=ON -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        cmake --build . --config ${{ matrix.build_type }} --target install
        cd ../..
        # fcl
        git clone https://github.com/flexible-collision-library/fcl
        cd fcl
        mkdir -p build
        cd build
        cmake -DBUILD_TESTING:BOOL=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        cmake --build . --config ${{ matrix.build_type }} --target install

    # ===================
    # CMAKE-BASED PROJECT
    # ===================

    - name: Configure [Windows]
      # Use bash also on Windows (otherwise cd, mkdir, ... do not work)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -A x64 -T ClangCl -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DBUILD_TESTING:BOOL=ON -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install \
                     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..

    - name: Configure [Ubuntu/macOS]
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DBUILD_TESTING:BOOL=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..

    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Test [Ubuntu/macOS] 
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      shell: bash
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }} .

    - name: Test [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cd build
        # We need to add to the path the location of manually installed binaries
        export PATH=$PATH:${GITHUB_WORKSPACE}/install/bin
        ctest --output-on-failure -C ${{ matrix.build_type }} .

    - name: Install [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL

    - name: Install [Ubuntu/macOS]
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --target install

    - name: Compile Examples [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cd examples
        mkdir -p build
        cd build
        cmake -A x64 -T ClangCl -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
               -Ddrake_SOURCE_DIR=${GITHUB_WORKSPACE}/build/drake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install ..
        cmake --build . --config ${{ matrix.build_type }}

    - name: Compile Examples [Ubuntu/macOS]
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      shell: bash
      run: |
        cd examples
        mkdir -p build
        cd build
        cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -Ddrake_SOURCE_DIR=${GITHUB_WORKSPACE}/build/drake ..
        cmake --build . --config ${{ matrix.build_type }}
