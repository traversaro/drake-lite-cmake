name: C++ CI Workflow

on:
  push:
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC 
  - cron:  '0 2 * * *'
  
  
jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release, Debug]
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@master
        
    # Print environment variables to simplify development and debugging
    - name: Environment Variables
      shell: bash
      run: env
    
    # Remove apt repos that are known to break from time to time 
    # See https://github.com/actions/virtual-environments/issues/323  
    - name: Remove broken apt repos [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
        
    # ============
    # DEPENDENCIES
    # ============
    
    - name: Dependencies [Windows]
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg.exe --triplet x64-windows install fmt eigen3
        # Dependencies to compile fcl from sources
        vcpkg.exe --triplet x64-windows install ccd octomap
        
    - name: Dependencies [macOS]
      if: matrix.os == 'macOS-latest'
      run: |
        brew install fmt eigen
        # Dependencies to compile fcl from sources
        brew install libccd octomap
    
    - name: Dependencies [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install git build-essential cmake libfmt-dev libeigen3-dev
        # Dependencies to compile fcl from sources
        sudo apt-get install libccd-dev liboctomap-dev
        
        
    - name: Source-based Dependencies [Windows] 
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # fcl
        git clone https://github.com/flexible-collision-library/fcl
        cd fcl
        mkdir -p build
        cd build
        cmake -A x64  -DBUILD_TESTING:BOOL=OFF -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL 
        
    - name: Source-based Dependencies [Ubuntu/macOS] 
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      shell: bash
      run: |
        # fcl
        git clone https://github.com/flexible-collision-library/fcl
        cd fcl
        mkdir -p build
        cd build
        cmake -DBUILD_TESTING:BOOL=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        cmake --build . --config ${{ matrix.build_type }} --target install 
 
    # ===================
    # CMAKE-BASED PROJECT
    # ===================
    
    - name: Configure [Windows]
      # Use bash also on Windows (otherwise cd, mkdir, ... do not work)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DBUILD_TESTING:BOOL=ON -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install \
                     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..

    - name: Configure [Ubuntu/macOS]
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DBUILD_TESTING:BOOL=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        
    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}
        
    - name: Test
      shell: bash
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }} . 
        
    - name: Install [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL
        
    - name: Install [Ubuntu/macOS]
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --target install
        
    - name: Compile Examples [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cd examples
        mkdir -p build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
               -Ddrake_SOURCE_DIR=${GITHUB_WORKSPACE}/build/drake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install .. 
        cmake --build . --config ${{ matrix.build_type }}
        
    - name: Compile Examples [Ubuntu/macOS]
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      shell: bash
      run: |
        cd examples
        mkdir -p build
        cd build
        cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -Ddrake_SOURCE_DIR=${GITHUB_WORKSPACE}/build/drake .. 
        cmake --build . --config ${{ matrix.build_type }}
